.. _2to3-reference:

2to3 - Python 2 升 3 自动代码转换
===============================================

.. sectionauthor:: Benjamin Peterson <benjamin@python.org>

2to3 是一个 Python 程序，能读取 Python 2.x 的源代码，经过一系列 *矫正* 把它变成有效的 Python 3.x 代码。这个标准库中有一大批矫正器，能够转换几乎所有代码。不过 2to3 的底层库 :mod:`lib2to3` 是个灵活的通用库，所以你可以自己写矫正器。\ :mod:`lib2to3` 还可以用来在定制的应用中自动改写 Python 代码。

.. _2to3-using:

2to3 的使用
---------------

通常 2to3 会作为脚本和 Python 解释器一起安装。它还会安装在 Python 根目录的 :file:`Tools/scripts` 目录中。

2to3 的基本参数是一系列待转换的文件或目录。对于目录，将会在其中递归寻找 Python 代码文件。

下面是 Python 2.x 的源文件 :file:`example.py`::

   def greet(name):
       print "Hello, {0}!".format(name)
   print "What's your name?"
   name = raw_input()
   greet(name)

可以在命令行下用 2to3 把它转换成 Python 3.x 的代码::

   $ 2to3 example.py

这里会输出与原文件的 diff 比较结果。2to3 还可以把所需的更改一下子写进源文件(会保留原文件的备份，除非指定了 :option:`-n`)。把更改写回文件是通过 :option:`-w` 开关::

   $ 2to3 -w example.py

转换过后，\ :file:`example.py` 内容如下::

   def greet(name):
       print("Hello, {0}!".format(name))
   print("What's your name?")
   name = input()
   greet(name)

注释和同样的缩进会在转换中保持不变。

默认情况下，2to3 会运行一系列\ :ref:`预定义矫正器 <2to3-fixers>`\ ，\ :option:`-l` 开关可以列出所有可用的矫正器。可以用 :option:`-f` 明确指定要运行的矫正器集合。类似的，\ :option:`-x` 明确取消一个矫正器。例如，下面只运行 ``imports`` 和 ``has_key`` 矫正器::

   $ 2to3 -f imports -f has_key example.py

而下面的命令运行除了 ``apply`` 以外的所有矫正器::

   $ 2to3 -x apply example.py

有些矫正器是 *显式的*\ ，即它们不会默认运行，而必需在命令行下列出才运行。下面除了默认的矫正器以外，还会运行 ``idioms`` 矫正器::

   $ 2to3 -f all -f idioms example.py

注意，指定 ``all`` 会启用所有默认的矫正器。

有时 2to3 会在你的代码中发再需要修改的地方，但不能自动修改；这时，2to3 会在文件的 diff 输出后打印一条警告。为了让代码与 3.x 兼容，你应该处理这些警告。

2to3 还可以重构 doctest ；可以用 :option:`-d` 开关打开这个模式。不过要注意它\ *只*\ 重构 doctest ，这甚至不要求模块含有正确的 Python 代码。例如，在 reST 文档中像 doctest 一样的例子也可以用这个选项来重构。

:option:`-v` 选项可以在转换中输出更多信息。

因为有些 print 语句解析时既可当作函数又可当作语句，所以 2to3 并不总是能解析包含 print 函数的文件。当 2to3 检测到存在 ``from __future__ import print_function`` 这样的编译器指示时，它就会修改内部语法而把 :func:`print` 当成函数；这样的变化也可以由 :option:`-p` 开头手动打开。如果 print 语句已经转化过就使用 :option:`-p` 来运行矫正器。

:option:`-o` 或者 :option:`--output-dir` 选项可以指定另外一个目录用来写入处理结果。如果保留文件备份没有什么意义，而原来的文件又不会被覆盖，可以用 :option:`-n` 开关。

.. versionadded:: 3.2.3
   增加 :option:`-o` 选项。

:option:`-W` 或者 :option:`--write-unchanged-files` 开关会让 2to3 总是要写入到输出文件，即使原来的文件没有改变。这个最好和 :option:`-o` 一起使用，这样可以把整个 Python 源代码树连同转换过后的代码都从一个目录复制到另一个目录。这个选项隐含打开 :option:`-w` 开关，因为否则就没有意义了。

.. versionadded:: 3.2.3
   增加 :option:`-W` 开关。

:option:`--add-suffix` 选项指定一个字符串用来添加到所有的输出文件名后面。如果写入到另外一个文件而又不需要备份，就需要指定 :option:`-n` 开关。例如::

   $ 2to3 -n -W --add-suffix=3 example.py

会把转换后的内容写入到 ``example.py3`` 文件中。

.. versionadded:: 3.2.3
   增加 :option:`--add-suffix` 选项。

把一个完整的项目从一个目录转换输出到另一个目录::

   $ 2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode


.. _2to3-fixers:

矫正器
------

代码转换的每个步骤都封装在矫正器中，这些矫正器可以用命令 ``2to3 -l`` 来列出。正如\ :ref:`上面所说 <2to3-using>`\ ，每个矫正器都可以单独打开和关闭。下面具体说明。


.. 2to3fixer:: apply

   去除 :func:`apply` 的使用。例如 ``apply(function, *args, **kwargs)`` 轮换成 ``function(*args, **kwargs)`` 。

.. 2to3fixer:: basestring

   把 :class:`basestring` 改成 :class:`str` 。

.. 2to3fixer:: buffer

   把 :class:`buffer` 改成 :class:`memoryview` 。这个矫正器是可选的，因为 :class:`memoryview` 的 API 虽然和 :class:`buffer` 类似却不完全相同。

.. 2to3fixer:: callable

   把 ``callable(x)`` 改成 ``isinstance(x, collections.Callable)`` ，并且在需要时加上导入 :mod:`collections` 模块的语句。注意，\ ``callable(x)`` 在 Python 3.2 又恢复了，所以如果你不打算支持 Python 3.1 就可以禁止这个矫正器。

.. 2to3fixer:: dict

   更改字典迭代的方法。\ :meth:`dict.iteritems` 改成 :meth:`dict.items` ，\ :meth:`dict.iterkeys` 改成 :meth:`dict.keys` ，\ :meth:`dict.itervalues` 改成 :meth:`dict.values` 。类似的，\ :meth:`dict.viewitems` 、\ :meth:`dict.viewkeys` 和 :meth:`dict.viewvalues` 分别改成 :meth:`dict.items` 、\ :meth:`dict.keys` 和 :meth:`dict.values` 。它还把已有的用法 :meth:`dict.items` 、\ :meth:`dict.keys` 和 :meth:`dict.values` 包装成对 :class:`list` 的调用。

.. 2to3fixer:: except

   把 ``except X, T`` 改成 ``except X as T`` 。

.. 2to3fixer:: exec

   把 ``exec`` 语句改成 :func:`exec` 函数。

.. 2to3fixer:: execfile

   去除 :func:`execfile` 的使用。\ :func:`execfile` 的参数包装成对 :func:`open` 、\ :func:`compile` 、和 :func:`exec` 的调用。

.. 2to3fixer:: exitfunc

   把对 :attr:`sys.exitfunc` 的赋值改成使用 :mod:`atexit` 模块。

.. 2to3fixer:: filter

   把 :func:`filter` 的使用包装成对 :class:`list` 的调用。

.. 2to3fixer:: funcattrs

   更正已经改名的函数属性。例如，\ ``my_function.func_closure`` 改成 ``my_function.__closure__`` 。

.. 2to3fixer:: future

   去掉 ``from __future__ import new_feature`` 语句。

.. 2to3fixer:: getcwdu

   把 :func:`os.getcwdu` 更名为 :func:`os.getcwd` 。

.. 2to3fixer:: has_key

   把 ``dict.has_key(key)`` 改为 ``key in dict`` 。

.. 2to3fixer:: idioms

   这个可选的矫正器进行好几项更改，从而让 Python 代码更地道。诸如 ``type(x) is SomeClass`` 和 ``type(x) == SomeClass`` 的类型转换改成 ``isinstance(x, SomeClass)`` ，\ ``while 1`` 成为 ``while True`` 。这个矫正器还会在适当的时候尽量使用 :func:`sorted` ，例如这段代码::

       L = list(some_iterable)
       L.sort()

   会改为::

      L = sorted(some_iterable)

.. 2to3fixer:: import

   检测同级导入并把它们改成相对导入。

.. 2to3fixer:: imports

   处理标准库中的模块重命名。

.. 2to3fixer:: imports2

   处理标准库中的其它重命名情况。它和 :2to3fixer:`imports` 矫正器分开只是由于技术的局限。

.. 2to3fixer:: input

   把 ``input(prompt)`` 改成 ``eval(input(prompt))`` 。

.. 2to3fixer:: intern

   把 :func:`intern` 改成 :func:`sys.intern` 。

.. 2to3fixer:: isinstance

   更正 :func:`isinstance` 第二个参数中的重复类型。例如，\ ``isinstance(x, (int, int))`` 改成 ``isinstance(x, (int))`` 。

.. 2to3fixer:: itertools_imports

   去除 :func:`itertools.ifilter` 、\ :func:`itertools.izip` 和 :func:`itertools.imap` 的导入。导入 :func:`itertools.ifilterfalse` 也改成 :func:`itertools.filterfalse` 。

.. 2to3fixer:: itertools

   把 :func:`itertools.ifilter` 、\ :func:`itertools.izip` 和 :func:`itertools.imap` 的使用改成使用内置的对应函数。\ :func:`itertools.ifilterfalse` 改成 :func:`itertools.filterfalse` 。

.. 2to3fixer:: long

   把长整型源常量的 ``L`` 前缀去掉，并把 :class:`long` 改成 :class:`int` 。

.. 2to3fixer:: map

   把 :func:`map` 包装成对 :class:`list` 的调用。还把 ``map(None, x)`` 改成 ``list(x)`` 。使用 ``from future_builtins import map`` 会禁用这个矫正器。

.. 2to3fixer:: metaclass

   把旧式的元类语法(类体中的 ``__metaclass__ = Meta``)改成新式的(``class X(metaclass=Meta)``)。

.. 2to3fixer:: methodattrs

   更正旧的属性名称。例如 ``meth.im_func`` 改成 ``meth.__func__`` 。

.. 2to3fixer:: ne

   改正旧式的不等于语法，即把 ``<>`` 改成 ``!=`` 。

.. 2to3fixer:: next

   把使用迭代器的 :meth:`~iterator.next` 方法改成 :func:`next` 方法。它还把 :meth:`next` 方法重命名为 :meth:`~object.__next__` 。

.. 2to3fixer:: nonzero

   把 :meth:`~object.__nonzero__` 重命名为 :meth:`~object.__bool__` 。

.. 2to3fixer:: numliterals

   把八进制源常量改成新式的语法。

.. 2to3fixer:: operator

   把调用 :mod:`operator` 模块里各种方法改成其它等价是函数调用。在需要时还会加入适当的 ``import`` 语句，例如 ``import collections`` 。转换详情如下:

   ==================================  ==========================================
   从                                  到
   ==================================  ==========================================
   ``operator.isCallable(obj)``        ``hasattr(obj, '__call__')``
   ``operator.sequenceIncludes(obj)``  ``operator.contains(obj)``
   ``operator.isSequenceType(obj)``    ``isinstance(obj, collections.Sequence)``
   ``operator.isMappingType(obj)``     ``isinstance(obj, collections.Mapping)``
   ``operator.isNumberType(obj)``      ``isinstance(obj, numbers.Number)``
   ``operator.repeat(obj, n)``         ``operator.mul(obj, n)``
   ``operator.irepeat(obj, n)``        ``operator.imul(obj, n)``
   ==================================  ==========================================

.. 2to3fixer:: paren

   在列表解析中需要的地方加上括号。例如，\ ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]`` 。

.. 2to3fixer:: print

   把 ``print`` 语句改成 :func:`print` 函数。

.. 2to3fixer:: raise

   把 ``raise E, V`` 改成 ``raise E(V)``，\ ``raise E, V, T`` 改成 ``raise E(V).with_traceback(T)`` 。如果 ``E`` 是个元组，这样的转换就是不正确的，因为把异常写成元组的功能已经在 3.0 中去掉了。

.. 2to3fixer:: raw_input

   把 :func:`raw_input` 改成 :func:`input` 。

.. 2to3fixer:: reduce

   处理 :func:`reduce` 到 :func:`functools.reduce` 的转换。

.. 2to3fixer:: renames

   把 :data:`sys.maxint` 改成 :data:`sys.maxsize` 。

.. 2to3fixer:: repr

   把反引号的 repr 替换成 :func:`repr` 函数。

.. 2to3fixer:: set_literal

   把使用 :class:`set` 构造函数的地方改成集合源常量。这个矫正器是可选的。

.. 2to3fixer:: standard_error

   把 :exc:`StandardError` 重命名为 :exc:`Exception` 。

.. 2to3fixer:: sys_exc

   把废弃的 :data:`sys.exc_value` 、\ :data:`sys.exc_type` 、\ :data:`sys.exc_traceback` 改成使用 :func:`sys.exc_info` 。

.. 2to3fixer:: throw

   进行生成函数 :meth:`throw` 方法的 API 更改。

.. 2to3fixer:: tuple_params

   去除陷式的元组参数解包。这个矫正器会插入临时变量。

.. 2to3fixer:: types

   解决因为去掉 :mod:`types` 模块中的某些成员引起的代码中断。

.. 2to3fixer:: unicode

   把 :class:`unicode` 改成 :class:`str` 。

.. 2to3fixer:: urllib

   处理 :mod:`urllib` 和 :mod:`urllib2` 重命名为 :mod:`urllib` 包的转变。

.. 2to3fixer:: ws_comma

   去除逗号分隔的项目中的多余空格。这个矫正器是可选的。

.. 2to3fixer:: xrange

   把 :func:`xrange` 重命名为 :func:`range` ，并把原来的 :func:`range` 调用包装成对 :class:`list` 的调用。

.. 2to3fixer:: xreadlines

   把 ``for x in file.xreadlines()`` 改成 ``for x in file`` 。

.. 2to3fixer:: zip

   把 :func:`zip` 的使用包装成对 :class:`list` 的调用。如果出现 ``from future_builtins import zip`` 则会禁用这个矫正器。


:mod:`lib2to3` - 2to3 库
-------------------------------

.. module:: lib2to3
   :synopsis: 2to3 库
.. moduleauthor:: Guido van Rossum
.. moduleauthor:: Collin Winter
.. moduleauthor:: Benjamin Peterson <benjamin@python.org>


.. note::

   :mod:`lib2to3` 的 API 应该看作不稳定的，将来可能有很大变化。

.. XXX What is the public interface anyway?
